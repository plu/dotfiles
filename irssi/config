servers = (
  {
    address = "irc.pilgerer.org";
    chatnet = "pilgerer";
    port = "9999";
    autoconnect = "yes";
    use_ssl = "yes";
    ssl_verify = "no";
  },
  {
    address = "irc.freenode.net";
    chatnet = "freenode";
    port = "7000";
    autoconnect = "yes";
    use_ssl = "yes";
    ssl_verify = "no";
  },
  {
    address = "localhost";
    chatnet = "bitlbee";
    port = "6667";
    autoconnect = "yes";
    use_ssl = "no";
    ssl_verify = "no";
  }
);

chatnets = { pilgerer = { type = "IRC"; }; freenode = { type = "IRC"; }; bitlbee = { type = "IRC"; }; };

channels = (
  { name = "#osm"; chatnet = "pilgerer"; autojoin = "yes"; },
  { name = "#laboheme"; chatnet = "pilgerer"; autojoin = "yes"; },
  { name = "#cocoapods"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#gearman"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#graylog2"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#hangops"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#jolokia"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#RestKit"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#smorch"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#xing_ios_dev"; chatnet = "freenode"; autojoin = "yes"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WL = "window list";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "window $0";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  UPTIME = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb $cumode$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$T{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]T}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://irssi.org/help/";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        #time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        act = { priority = "10"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        otr = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        barstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    timestamp = { disabled = "yes"; };
  };
};

settings = {
  core = {
    real_name = "Johannes Plunien";
    user_name = "plu";
    nick = "plu";
    awaylog_level = "MSGS HILIGHT";
    awaylog_file = "~/.irssi/logs/away.log";
    log_timestamp = "%Y-%m-%d %H:%M:%S ";
    timestamp_format = "%H:%M:%S";
    recode = "yes";
    recode_autodetect_utf8 = "yes";
    recode_transliterate = "yes";
    recode_fallback = "ISO-8859-15";
    recode_out_default_charset = "UTF-8";
  };
  "fe-common/core" = {
    timestamps = "yes";
    use_status_window = "no";
    use_msgs_window = "yes";
    theme = "simpleii.theme";
    beep_msg_level = "hilight";
    hilight_color = "%B%3";
    hilight_act_color = "%B%3";
    hilight_nick_matches = "yes";
    term_charset = "utf-8";
    autolog_path = "~/.irssi/logs/$tag/$0.log";
    autolog = "no";
    emphasis_multiword = "yes";
    autoclose_windows = "no";
  };
  "fe-text" = {
    colors = "no";
    autostick_split_windows = "yes";
    actlist_sort = "refnum";
  };
  "irc/dcc" = { dcc_autoget = "yes"; };
  "perl/core/scripts" = {
    screen_away_message = "not here - screen detached";
  };
};

logs = { };

hilights = (
  { text = "New request:"; nick = "yes"; word = "yes"; regexp = "yes"; },
  {
    text = "[^a-Z0-9]plu[^a-Z0-9:@]";
    nick = "yes";
    word = "yes";
    regexp = "yes";
  },
  { text = "PLUT00TH"; nick = "yes"; word = "yes"; regexp = "yes"; },
  {
    text = "[^a-Z0-9]plutooth[^a-Z0-9:]";
    nick = "yes";
    word = "yes";
    regexp = "yes";
  },
  { text = "^plu$"; nick = "yes"; word = "yes"; regexp = "yes"; },
  { text = "^plutooth$"; nick = "yes"; word = "yes"; regexp = "yes"; },
  {
    text = "^plutooth[^a-Z0-9:]";
    nick = "yes";
    word = "yes";
    regexp = "yes";
  },
  { 
    text = "^plu[^a-Z0-9:@]";
    nick = "yes";
    word = "yes";
    regexp = "yes";
  },
  { text = "[^a-Z0-9]plu$"; nick = "yes"; word = "yes"; regexp = "yes"; },
  {
    text = "[^a-Z0-9]plutooth$";
    nick = "yes";
    word = "yes";
    regexp = "yes";
  }
);

ignores = (
  { mask = "github!*@*"; level = "JOINS PARTS"; },
  { mask = "github-wet!*@*"; level = "JOINS PARTS"; },
  { mask = "wettengh!*@*"; level = "JOINS PARTS"; },
  { level = "JOINS"; }
);

keyboard = (
  { key = "^[OP"; id = "key"; data = "F1"; },
  { key = "^[OQ"; id = "key"; data = "F2"; },
  { key = "^[OR"; id = "key"; data = "F3"; },
  { key = "^[OS"; id = "key"; data = "F4"; },
  { key = "^[OT"; id = "key"; data = "F5"; },
  { key = "F1"; id = "command"; data = "ECHO F1 pressed"; },
  { key = "F2"; id = "command"; data = "ECHO F2 pressed"; },
  { key = "F3"; id = "command"; data = "ECHO F3 pressed"; },
  { key = "F4"; id = "command"; data = "ECHO F4 pressed"; },
  { key = "F5"; id = "command"; data = "ECHO F5 pressed"; }
);

completions = {
  thx = { value = "thanks"; auto = "yes"; };
  "/ " = { value = "/"; auto = "yes"; };
  o = { value = "oida"; auto = "no"; };
};
